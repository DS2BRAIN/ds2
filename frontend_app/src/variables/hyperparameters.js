export const INITIAL_ALGORITHM_INFO = {
  keras_ann: {
    label: "ANN-Keras",
    method: "clf/reg",
    parameter: {
      layer_width: {
        inputType: "numb",
        min: 1,
        dataType: "int",
        dataTypeOptions: ["int"],
        method: "clf/reg",
        checked: false,
        disabled: false,
        valueArr: [10],
      },
      layer_deep: {
        inputType: "numb",
        min: 1,
        dataType: "int",
        dataTypeOptions: ["int"],
        method: "clf/reg",
        checked: false,
        disabled: false,
        valueArr: [3],
      },
      epochs: {
        inputType: "numb",
        min: 1,
        dataType: "int",
        dataTypeOptions: ["int"],
        method: "clf/reg",
        checked: false,
        disabled: false,
        valueArr: [10],
      },
      loss_function: {
        inputType: "option",
        value: "mean_squared_error",
        options: [
          "mean_squared_error",
          "mean_absolute_error",
          "mean_absolute_percentage_error",
          "mean_squared_logarithmic_error",
          "squared_hinge",
          "hinge",
          "categorical_hinge",
          "logcosh",
          "categorical_crossentropy",
          "sparse_categorical_crossentropy",
          "binary_crossentropy",
          "kullback_leibler_divergence",
          "poisson",
          "Adamax",
        ],
        dataType: "str",
        dataTypeOptions: ["str"],
        method: "clf/reg",
        checked: false,
        disabled: false,
        valueArr: ["mean_squared_error"],
      },
      optimizer: {
        inputType: "option",
        value: "Adam",
        options: [
          "Adam",
          "SGD",
          "RMSprop",
          "Adagrad",
          "Adadelta",
          "AdamX",
          "Nadam",
        ],
        dataType: "dict",
        dataTypeOptions: ["dict"],
        method: "clf/reg",
        checked: false,
        disabled: false,
        subParameter: {
          Adam: {
            label: "Adam",
            method: "clf/reg",
            parameter: {
              clipvalue: {
                inputType: "numb",
                min: -0.5,
                max: 0.5,
                dataType: "float",
                dataTypeOptions: ["float"],
                method: "clf/reg",
                checked: false,
                disabled: false,
                valueArr: [0.5],
              },
              learning_rate: {
                inputType: "numb",
                min: 0,
                dataType: "float",
                dataTypeOptions: ["float"],
                method: "clf/reg",
                checked: false,
                disabled: false,
                valueArr: [0.001],
              },
              beta_1: {
                inputType: "numb",
                min: 0,
                max: 1,
                dataType: "float",
                dataTypeOptions: ["float"],
                method: "clf/reg",
                between: true,
                checked: false,
                disabled: false,
                valueArr: [0.9],
              },
              beta_2: {
                inputType: "numb",
                min: 0,
                max: 1,
                dataType: "float",
                dataTypeOptions: ["float"],
                method: "clf/reg",
                between: true,
                checked: false,
                disabled: false,
                valueArr: [0.9999],
              },
              epsilon: {
                inputType: "numb",
                value: "None",
                min: 0,
                dataType: "float",
                dataTypeOptions: ["float", "None"],
                method: "clf/reg",
                subValue: "None",
                checked: false,
                disabled: false,
              },
              decay: {
                inputType: "numb",
                min: 0,
                dataType: "float",
                dataTypeOptions: ["float"],
                method: "clf/reg",
                checked: false,
                disabled: false,
                valueArr: [0],
              },
              amsgrad: {
                inputType: "option",
                value: "false",
                options: ["false", "true"],
                dataType: "bool",
                dataTypeOptions: ["bool"],
                method: "clf/reg",
                checked: false,
                disabled: false,
                valueArr: ["false"],
              },
            },
          },
          SGD: {
            label: "SGD",
            method: "clf/reg",
            parameter: {
              clipvalue: {
                inputType: "numb",
                min: -0.5,
                max: 0.5,
                dataType: "float",
                dataTypeOptions: ["float"],
                method: "clf/reg",
                checked: false,
                disabled: false,
                valueArr: [0.5],
              },
              learning_rate: {
                inputType: "numb",
                min: 0,
                dataType: "float",
                dataTypeOptions: ["float"],
                method: "clf/reg",
                checked: false,
                disabled: false,
                valueArr: [0.01],
              },
              momentum: {
                inputType: "numb",
                min: 0,
                dataType: "float",
                dataTypeOptions: ["float"],
                method: "clf/reg",
                checked: false,
                disabled: false,
                valueArr: [0],
              },
              decay: {
                inputType: "numb",
                min: 0,
                dataType: "float",
                dataTypeOptions: ["float"],
                method: "clf/reg",
                checked: false,
                disabled: false,
                valueArr: [0],
              },
            },
          },
          SGD_nesterov_momentum: {
            label: "SGD-Nesterov Momentum",
            method: "clf/reg",
            parameter: {
              clipvalue: {
                inputType: "numb",
                min: -0.5,
                max: 0.5,
                dataType: "float",
                dataTypeOptions: ["float"],
                method: "clf/reg",
                checked: false,
                disabled: false,
                valueArr: [0.5],
              },
              learning_rate: {
                inputType: "numb",
                min: 0,
                dataType: "float",
                dataTypeOptions: ["float"],
                method: "clf/reg",
                checked: false,
                disabled: false,
                valueArr: [0.01],
              },
              momentum: {
                inputType: "numb",
                min: 0,
                dataType: "float",
                dataTypeOptions: ["float"],
                method: "clf/reg",
                checked: false,
                disabled: false,
                valueArr: [0],
              },
              decay: {
                inputType: "numb",
                min: 0,
                dataType: "float",
                dataTypeOptions: ["float"],
                method: "clf/reg",
                checked: false,
                disabled: false,
                valueArr: [0],
              },
            },
          },
          RMSprop: {
            label: "RMSprop",
            method: "clf/reg",
            parameter: {
              clipvalue: {
                inputType: "numb",
                min: -0.5,
                max: 0.5,
                dataType: "float",
                dataTypeOptions: ["float"],
                method: "clf/reg",
                checked: false,
                disabled: false,
                valueArr: [0.5],
              },
              learning_rate: {
                inputType: "numb",
                min: 0,
                dataType: "float",
                dataTypeOptions: ["float"],
                method: "clf/reg",
                checked: false,
                disabled: false,
                valueArr: [0.001],
              },
              rho: {
                inputType: "numb",
                min: 0,
                dataType: "float",
                dataTypeOptions: ["float"],
                method: "clf/reg",
                checked: false,
                disabled: false,
                valueArr: [0.9],
              },
              epsilon: {
                inputType: "numb",
                value: "None",
                min: 0,
                dataType: "float",
                dataTypeOptions: ["float", "None"],
                method: "clf/reg",
                subValue: "None",
                checked: false,
                disabled: false,
              },
              decay: {
                inputType: "numb",
                min: 0,
                dataType: "float",
                dataTypeOptions: ["float"],
                method: "clf/reg",
                checked: false,
                disabled: false,
                valueArr: [0],
              },
            },
          },
          Adagrad: {
            label: "Adagrad",
            method: "clf/reg",
            parameter: {
              clipvalue: {
                inputType: "numb",
                min: -0.5,
                max: 0.5,
                dataType: "float",
                dataTypeOptions: ["float"],
                method: "clf/reg",
                checked: false,
                disabled: false,
                valueArr: [0.5],
              },
              learning_rate: {
                inputType: "numb",
                min: 0,
                dataType: "float",
                dataTypeOptions: ["float"],
                method: "clf/reg",
                checked: false,
                disabled: false,
                valueArr: [0.01],
              },
              epsilon: {
                inputType: "numb",
                value: "None",
                min: 0,
                dataType: "float",
                dataTypeOptions: ["float", "None"],
                method: "clf/reg",
                subValue: "None",
                checked: false,
                disabled: false,
              },
              decay: {
                inputType: "numb",
                min: 0,
                dataType: "float",
                dataTypeOptions: ["float"],
                method: "clf/reg",
                checked: false,
                disabled: false,
                valueArr: [0],
              },
            },
          },
          Adadelta: {
            label: "Adadelta",
            method: "clf/reg",
            parameter: {
              clipvalue: {
                inputType: "numb",
                min: -0.5,
                max: 0.5,
                dataType: "float",
                dataTypeOptions: ["float"],
                method: "clf/reg",
                checked: false,
                disabled: false,
                valueArr: [0.5],
              },
              learning_rate: {
                inputType: "numb",
                min: 0,
                dataType: "float",
                dataTypeOptions: ["float"],
                method: "clf/reg",
                checked: false,
                disabled: false,
                valueArr: [1],
              },
              epsilon: {
                inputType: "numb",
                value: "None",
                min: 0,
                dataType: "float",
                dataTypeOptions: ["float", "None"],
                method: "clf/reg",
                subValue: "None",
                checked: false,
                disabled: false,
              },
              decay: {
                inputType: "numb",
                min: 0,
                dataType: "float",
                dataTypeOptions: ["float"],
                method: "clf/reg",
                checked: false,
                disabled: false,
                valueArr: [0],
              },
            },
          },
          AdamX: {
            label: "AdamX",
            method: "clf/reg",
            parameter: {
              clipvalue: {
                inputType: "numb",
                min: -0.5,
                max: 0.5,
                dataType: "float",
                dataTypeOptions: ["float"],
                method: "clf/reg",
                checked: false,
                disabled: false,
                valueArr: [0.5],
              },
              learning_rate: {
                inputType: "numb",
                min: 0,
                dataType: "float",
                dataTypeOptions: ["float"],
                method: "clf/reg",
                checked: false,
                disabled: false,
                valueArr: [0.002],
              },
              beta_1: {
                inputType: "numb",
                min: 0,
                max: 1,
                dataType: "float",
                dataTypeOptions: ["float"],
                method: "clf/reg",
                between: true,
                checked: false,
                disabled: false,
                valueArr: [0.9],
              },
              beta_2: {
                inputType: "numb",
                min: 0,
                max: 1,
                dataType: "float",
                dataTypeOptions: ["float"],
                method: "clf/reg",
                between: true,
                checked: false,
                disabled: false,
                valueArr: [0.9999],
              },
              epsilon: {
                inputType: "numb",
                value: "None",
                min: 0,
                dataType: "float",
                dataTypeOptions: ["float", "None"],
                method: "clf/reg",
                subValue: "None",
                checked: false,
                disabled: false,
              },
              decay: {
                inputType: "numb",
                min: 0,
                dataType: "float",
                dataTypeOptions: ["float"],
                method: "clf/reg",
                checked: false,
                disabled: false,
                valueArr: [0],
              },
            },
          },
          Nadam: {
            label: "Nadam",
            method: "clf/reg",
            parameter: {
              clipvalue: {
                inputType: "numb",
                min: -0.5,
                max: 0.5,
                dataType: "float",
                dataTypeOptions: ["float"],
                method: "clf/reg",
                checked: false,
                disabled: false,
                valueArr: [0.5],
              },
              learning_rate: {
                inputType: "numb",
                min: 0,
                dataType: "float",
                dataTypeOptions: ["float"],
                method: "clf/reg",
                checked: false,
                disabled: false,
                valueArr: [0.002],
              },
              beta_1: {
                inputType: "numb",
                min: 0,
                max: 1,
                dataType: "float",
                dataTypeOptions: ["float"],
                method: "clf/reg",
                between: true,
                checked: false,
                disabled: false,
                valueArr: [0.9],
              },
              beta_2: {
                inputType: "numb",
                min: 0,
                max: 1,
                dataType: "float",
                dataTypeOptions: ["float"],
                method: "clf/reg",
                between: true,
                checked: false,
                disabled: false,
                valueArr: [0.9999],
              },
              epsilon: {
                inputType: "numb",
                value: "None",
                min: 0,
                dataType: "float",
                dataTypeOptions: ["float", "None"],
                method: "clf/reg",
                subValue: "None",
                checked: false,
                disabled: false,
              },
              schedule_decay: {
                inputType: "numb",
                dataType: "float",
                dataTypeOptions: ["float"],
                method: "clf/reg",
                checked: false,
                disabled: false,
                valueArr: [0.004],
              },
            },
          },
        },
      },
      activation: {
        inputType: "option",
        value: "relu",
        options: [
          "relu",
          "softmax",
          "selu",
          "elu",
          "softplus",
          "softsign",
          "tanh",
          "sigmoid",
          "hard_sigmoid",
          "exponential",
          "linear",
        ],
        dataType: "str",
        dataTypeOptions: ["str"],
        method: "clf/reg",
        checked: false,
        disabled: false,
        valueArr: ["relu"],
      },
      batch_size: {
        inputType: "numb",
        min: 1,
        dataType: "int",
        dataTypeOptions: ["int"],
        method: "clf/reg",
        checked: false,
        disabled: false,
        valueArr: [32],
      },
      output_activation: {
        inputType: "option",
        value: "relu",
        options: [
          "relu",
          "softmax",
          "selu",
          "elu",
          "softplus",
          "softsign",
          "tanh",
          "sigmoid",
          "hard_sigmoid",
          "exponential",
          "linear",
        ],
        dataType: "str",
        dataTypeOptions: ["str"],
        method: "clf/reg",
        checked: false,
        disabled: false,
        valueArr: ["relu"],
      },
    },
  },
  torch_ann: {
    label: "ANN-Pytorch",
    method: "clf/reg",
    parameter: {
      layer_width: {
        inputType: "numb",
        min: 1,
        dataType: "int",
        dataTypeOptions: ["int"],
        method: "clf/reg",
        checked: false,
        disabled: false,
        valueArr: [10],
      },
      layer_deep: {
        inputType: "numb",
        min: 1,
        dataType: "int",
        dataTypeOptions: ["int"],
        method: "clf/reg",
        checked: false,
        disabled: false,
        valueArr: [3],
      },
      epochs: {
        inputType: "numb",
        min: 1,
        dataType: "int",
        dataTypeOptions: ["int"],
        method: "clf/reg",
        checked: false,
        disabled: false,
        valueArr: [10],
      },
      loss_function: {
        inputType: "option",
        value: "MSELoss",
        options: [
          "MSELoss",
          "BCELoss",
          "L1Loss",
          "NLLLoss",
          "BCEWithLogitsLoss",
          "CosineEmbeddingLoss",
          "CrossEntropyLoss",
          "CTCLoss",
          "GaussianNLLLoss",
          "HingeEmbeddingLoss",
          "HuberLoss",
          "KLDivLoss",
          "MarginRankingLoss",
          "MultiLabelMarginLoss",
          "MultiLabelSoftMarginLoss",
          "NLLLoss2d",
          "PoissonNLLLoss",
          "SmoothL1Loss",
          "TripletMarginLoss",
          "TripletMarginWithDistanceLoss",
          "PairwiseDistance",
        ],
        dataType: "str",
        dataTypeOptions: ["str"],
        method: "clf/reg",
        checked: false,
        disabled: false,
        valueArr: ["MSELoss"],
      },
      optimizer: {
        inputType: "option",
        value: "Adam",
        options: [
          "Adam",
          "SGD",
          "RMSprop",
          "Adagrad",
          "Adadelta",
          "AdamX",
          "Nadam",
        ],
        dataType: "dict",
        dataTypeOptions: ["dict"],
        method: "clf/reg",
        checked: false,
        disabled: false,
        subParameter: {
          Adam: {
            label: "Adam",
            method: "clf/reg",
            parameter: {
              clipvalue: {
                inputType: "numb",
                min: -0.5,
                max: 0.5,
                dataType: "float",
                dataTypeOptions: ["float"],
                method: "clf/reg",
                checked: false,
                disabled: false,
                valueArr: [0.5],
              },
              learning_rate: {
                inputType: "numb",
                min: 0,
                dataType: "float",
                dataTypeOptions: ["float"],
                method: "clf/reg",
                checked: false,
                disabled: false,
                valueArr: [0.001],
              },
              beta_1: {
                inputType: "numb",
                min: 0,
                max: 1,
                dataType: "float",
                dataTypeOptions: ["float"],
                method: "clf/reg",
                between: true,
                checked: false,
                disabled: false,
                valueArr: [0.9],
              },
              beta_2: {
                inputType: "numb",
                min: 0,
                max: 1,
                dataType: "float",
                dataTypeOptions: ["float"],
                method: "clf/reg",
                between: true,
                checked: false,
                disabled: false,
                valueArr: [0.9999],
              },
              epsilon: {
                inputType: "numb",
                value: "None",
                min: 0,
                dataType: "float",
                dataTypeOptions: ["float", "None"],
                method: "clf/reg",
                subValue: "None",
                checked: false,
                disabled: false,
              },
              decay: {
                inputType: "numb",
                min: 0,
                dataType: "float",
                dataTypeOptions: ["float"],
                method: "clf/reg",
                checked: false,
                disabled: false,
                valueArr: [0],
              },
              amsgrad: {
                inputType: "option",
                value: "false",
                options: ["false", "true"],
                dataType: "bool",
                dataTypeOptions: ["bool"],
                method: "clf/reg",
                checked: false,
                disabled: false,
                valueArr: ["false"],
              },
            },
          },
          SGD: {
            label: "SGD",
            method: "clf/reg",
            parameter: {
              clipvalue: {
                inputType: "numb",
                min: -0.5,
                max: 0.5,
                dataType: "float",
                dataTypeOptions: ["float"],
                method: "clf/reg",
                checked: false,
                disabled: false,
                valueArr: [0.5],
              },
              learning_rate: {
                inputType: "numb",
                min: 0,
                dataType: "float",
                dataTypeOptions: ["float"],
                method: "clf/reg",
                checked: false,
                disabled: false,
                valueArr: [0.01],
              },
              momentum: {
                inputType: "numb",
                min: 0,
                dataType: "float",
                dataTypeOptions: ["float"],
                method: "clf/reg",
                checked: false,
                disabled: false,
                valueArr: [0],
              },
              decay: {
                inputType: "numb",
                min: 0,
                dataType: "float",
                dataTypeOptions: ["float"],
                method: "clf/reg",
                checked: false,
                disabled: false,
                valueArr: [0],
              },
            },
          },
          SGD_nesterov_momentum: {
            label: "SGD-Nesterov Momentum",
            method: "clf/reg",
            parameter: {
              clipvalue: {
                inputType: "numb",
                min: -0.5,
                max: 0.5,
                dataType: "float",
                dataTypeOptions: ["float"],
                method: "clf/reg",
                checked: false,
                disabled: false,
                valueArr: [0.5],
              },
              learning_rate: {
                inputType: "numb",
                min: 0,
                dataType: "float",
                dataTypeOptions: ["float"],
                method: "clf/reg",
                checked: false,
                disabled: false,
                valueArr: [0.01],
              },
              momentum: {
                inputType: "numb",
                min: 0,
                dataType: "float",
                dataTypeOptions: ["float"],
                method: "clf/reg",
                checked: false,
                disabled: false,
                valueArr: [0],
              },
              decay: {
                inputType: "numb",
                min: 0,
                dataType: "float",
                dataTypeOptions: ["float"],
                method: "clf/reg",
                checked: false,
                disabled: false,
                valueArr: [0],
              },
            },
          },
          RMSprop: {
            label: "RMSprop",
            method: "clf/reg",
            parameter: {
              clipvalue: {
                inputType: "numb",
                min: -0.5,
                max: 0.5,
                dataType: "float",
                dataTypeOptions: ["float"],
                method: "clf/reg",
                checked: false,
                disabled: false,
                valueArr: [0.5],
              },
              learning_rate: {
                inputType: "numb",
                min: 0,
                dataType: "float",
                dataTypeOptions: ["float"],
                method: "clf/reg",
                checked: false,
                disabled: false,
                valueArr: [0.001],
              },
              rho: {
                inputType: "numb",
                min: 0,
                dataType: "float",
                dataTypeOptions: ["float"],
                method: "clf/reg",
                checked: false,
                disabled: false,
                valueArr: [0.9],
              },
              epsilon: {
                inputType: "numb",
                value: "None",
                min: 0,
                dataType: "float",
                dataTypeOptions: ["float", "None"],
                method: "clf/reg",
                subValue: "None",
                checked: false,
                disabled: false,
              },
              decay: {
                inputType: "numb",
                min: 0,
                dataType: "float",
                dataTypeOptions: ["float"],
                method: "clf/reg",
                checked: false,
                disabled: false,
                valueArr: [0],
              },
            },
          },
          Adagrad: {
            label: "Adagrad",
            method: "clf/reg",
            parameter: {
              clipvalue: {
                inputType: "numb",
                min: -0.5,
                max: 0.5,
                dataType: "float",
                dataTypeOptions: ["float"],
                method: "clf/reg",
                checked: false,
                disabled: false,
                valueArr: [0.5],
              },
              learning_rate: {
                inputType: "numb",
                min: 0,
                dataType: "float",
                dataTypeOptions: ["float"],
                method: "clf/reg",
                checked: false,
                disabled: false,
                valueArr: [0.01],
              },
              epsilon: {
                inputType: "numb",
                value: "None",
                min: 0,
                dataType: "float",
                dataTypeOptions: ["float", "None"],
                method: "clf/reg",
                subValue: "None",
                checked: false,
                disabled: false,
              },
              decay: {
                inputType: "numb",
                min: 0,
                dataType: "float",
                dataTypeOptions: ["float"],
                method: "clf/reg",
                checked: false,
                disabled: false,
                valueArr: [0],
              },
            },
          },
          Adadelta: {
            label: "Adadelta",
            method: "clf/reg",
            parameter: {
              clipvalue: {
                inputType: "numb",
                min: -0.5,
                max: 0.5,
                dataType: "float",
                dataTypeOptions: ["float"],
                method: "clf/reg",
                checked: false,
                disabled: false,
                valueArr: [0.5],
              },
              learning_rate: {
                inputType: "numb",
                min: 0,
                dataType: "float",
                dataTypeOptions: ["float"],
                method: "clf/reg",
                checked: false,
                disabled: false,
                valueArr: [1],
              },
              epsilon: {
                inputType: "numb",
                value: "None",
                min: 0,
                dataType: "float",
                dataTypeOptions: ["float", "None"],
                method: "clf/reg",
                subValue: "None",
                checked: false,
                disabled: false,
              },
              decay: {
                inputType: "numb",
                min: 0,
                dataType: "float",
                dataTypeOptions: ["float"],
                method: "clf/reg",
                checked: false,
                disabled: false,
                valueArr: [0],
              },
            },
          },
          AdamX: {
            label: "AdamX",
            method: "clf/reg",
            parameter: {
              clipvalue: {
                inputType: "numb",
                min: -0.5,
                max: 0.5,
                dataType: "float",
                dataTypeOptions: ["float"],
                method: "clf/reg",
                checked: false,
                disabled: false,
                valueArr: [0.5],
              },
              learning_rate: {
                inputType: "numb",
                min: 0,
                dataType: "float",
                dataTypeOptions: ["float"],
                method: "clf/reg",
                checked: false,
                disabled: false,
                valueArr: [0.002],
              },
              beta_1: {
                inputType: "numb",
                min: 0,
                max: 1,
                dataType: "float",
                dataTypeOptions: ["float"],
                method: "clf/reg",
                between: true,
                checked: false,
                disabled: false,
                valueArr: [0.9],
              },
              beta_2: {
                inputType: "numb",
                min: 0,
                max: 1,
                dataType: "float",
                dataTypeOptions: ["float"],
                method: "clf/reg",
                between: true,
                checked: false,
                disabled: false,
                valueArr: [0.9999],
              },
              epsilon: {
                inputType: "numb",
                value: "None",
                min: 0,
                dataType: "float",
                dataTypeOptions: ["float", "None"],
                method: "clf/reg",
                subValue: "None",
                checked: false,
                disabled: false,
              },
              decay: {
                inputType: "numb",
                min: 0,
                dataType: "float",
                dataTypeOptions: ["float"],
                method: "clf/reg",
                checked: false,
                disabled: false,
                valueArr: [0],
              },
            },
          },
          Nadam: {
            label: "Nadam",
            method: "clf/reg",
            parameter: {
              clipvalue: {
                inputType: "numb",
                min: -0.5,
                max: 0.5,
                dataType: "float",
                dataTypeOptions: ["float"],
                method: "clf/reg",
                checked: false,
                disabled: false,
                valueArr: [0.5],
              },
              learning_rate: {
                inputType: "numb",
                min: 0,
                dataType: "float",
                dataTypeOptions: ["float"],
                method: "clf/reg",
                checked: false,
                disabled: false,
                valueArr: [0.002],
              },
              beta_1: {
                inputType: "numb",
                min: 0,
                max: 1,
                dataType: "float",
                dataTypeOptions: ["float"],
                method: "clf/reg",
                between: true,
                checked: false,
                disabled: false,
                valueArr: [0.9],
              },
              beta_2: {
                inputType: "numb",
                min: 0,
                max: 1,
                dataType: "float",
                dataTypeOptions: ["float"],
                method: "clf/reg",
                between: true,
                checked: false,
                disabled: false,
                valueArr: [0.9999],
              },
              epsilon: {
                inputType: "numb",
                value: "None",
                min: 0,
                dataType: "float",
                dataTypeOptions: ["float", "None"],
                method: "clf/reg",
                subValue: "None",
                checked: false,
                disabled: false,
              },
              schedule_decay: {
                inputType: "numb",
                dataType: "float",
                dataTypeOptions: ["float"],
                method: "clf/reg",
                checked: false,
                disabled: false,
                valueArr: [0.004],
              },
            },
          },
        },
      },
      activation: {
        inputType: "option",
        value: "relu",
        options: [
          "relu",
          "RReLU",
          "Hardtanh",
          "ReLU6",
          "sigmoid",
          "hard_sigmoid",
          "tanh",
          "SiLU",
          "Mish",
          "Hardswish",
          "elu",
          "CELU",
          "selu",
          "GELU",
          "Hardshrink",
          "LeakyReLU",
          "LogSigmoid",
          "Softplus",
          "Softshrink",
          "MultiheadAttention",
          "PReLU",
          "Tanhshrink",
          "Softmin",
          "Softmax",
          "Softmax2d",
          "LogSoftmax",
        ],
        dataType: "str",
        dataTypeOptions: ["str"],
        method: "clf/reg",
        checked: false,
        disabled: false,
        valueArr: ["relu"],
      },
      batch_size: {
        inputType: "numb",
        min: 1,
        dataType: "int",
        dataTypeOptions: ["int"],
        method: "clf/reg",
        checked: false,
        disabled: false,
        valueArr: [32],
      },
      output_activation: {
        inputType: "option",
        value: "relu",
        options: [
          "relu",
          "RReLU",
          "Hardtanh",
          "ReLU6",
          "sigmoid",
          "hard_sigmoid",
          "tanh",
          "SiLU",
          "Mish",
          "Hardswish",
          "elu",
          "CELU",
          "selu",
          "GELU",
          "Hardshrink",
          "LeakyReLU",
          "LogSigmoid",
          "Softplus",
          "Softshrink",
          "MultiheadAttention",
          "PReLU",
          "Tanhshrink",
          "Softmin",
          "Softmax",
          "Softmax2d",
          "LogSoftmax",
        ],
        dataType: "str",
        dataTypeOptions: ["str"],
        method: "clf/reg",
        checked: false,
        disabled: false,
        valueArr: ["relu"],
      },
    },
  },
  fastai_ann: {
    label: "ANN-FastAI",
    method: "clf/reg",
    parameter: {
      layer_width: {
        inputType: "numb",
        min: 1,
        dataType: "int",
        dataTypeOptions: ["int"],
        method: "clf/reg",
        checked: false,
        disabled: false,
        valueArr: [200],
      },
      layer_deep: {
        inputType: "numb",
        min: 1,
        dataType: "int",
        dataTypeOptions: ["int"],
        method: "clf/reg",
        checked: false,
        disabled: false,
        valueArr: [2],
      },
      ps: {
        inputType: "numb",
        value: "None",
        min: 0,
        between: true,
        dataType: "float",
        dataTypeOptions: ["float", "None"],
        method: "clf/reg",
        subValue: "None",
        subDomainCondition: {
          action: "count",
          value: "layer_deep",
          text:
            "The setting value of layer_deep and the number of parameter values ​​must be the same.",
          isMatched: true,
        },
        checked: false,
        disabled: false,
      },
      embed_p: {
        inputType: "numb",
        min: 0,
        max: 1,
        dataType: "float",
        dataTypeOptions: ["float"],
        method: "clf/reg",
        checked: false,
        disabled: false,
        valueArr: [0],
      },
      y_range: {
        inputType: "numb",
        value: "None",
        dataType: "float",
        dataTypeOptions: ["float", "range", "None"],
        method: "clf/reg",
        subValue: "None",
        subCondition: {
          param: "y_block",
          value: ["regression"],
          isMatched: true,
        },
        range: {
          split: 0,
        },
        checked: false,
        disabled: false,
      },
      opt_func: {
        inputType: "option",
        value: "Adam",
        options: [
          "Adam",
          "sgd_step",
          "weight_decay",
          "l2_reg",
          "average_grad",
          "average_sqr_grad",
          "momentum_step",
          "SGD",
          "rms_prop_step",
          "RMSprop",
          "step_stat",
          "debias",
          "adam_step",
          "radam_step",
          "RAdam",
          "qhadam_step",
          "larc_layer_lr",
          "larc_step",
          "lamb_step",
          "Lookahead",
          "ranger",
          "detuplify_pg",
          "set_item_pg",
          "pytorch_hp_map",
          "OptimWrapper",
        ],
        dataType: "str",
        dataTypeOptions: ["str"],
        method: "clf/reg",
        checked: false,
        disabled: false,
        valueArr: ["Adam"],
      },
      loss_func: {
        inputType: "option",
        value: "CrossEntropyLossFlat",
        options: [
          "CrossEntropyLossFlat",
          "FocalLossFlat",
          "BCEWithLogitsLossFlat",
          "MSELossFlat",
          "L1LossFlat",
          "BCELossFlat",
          "LabelSmoothingCrossEntropy",
          "LabelSmoothingCrossEntropyFlat",
          "DiceLoss",
        ],
        dataType: "str",
        dataTypeOptions: ["str"],
        method: "clf/reg",
        checked: false,
        disabled: false,
        valueArr: ["CrossEntropyLossFlat"],
      },
      loss_func_reduction: {
        inputType: "option",
        value: "mean",
        options: ["mean", "null", "sum"],
        dataType: "str",
        dataTypeOptions: ["str"],
        method: "clf/reg",
        checked: false,
        disabled: false,
        valueArr: ["mean"],
      },
      loss_func_gamma: {
        inputType: "numb",
        min: 0,
        dataType: "float",
        dataTypeOptions: ["float"],
        method: "clf/reg",
        subCondition: {
          param: "loss_func",
          value: ["FocalLossFlat"],
          isMatched: true,
        },
        checked: false,
        disabled: false,
        valueArr: [2],
      },
      loss_func_floatify: {
        inputType: "option",
        value: "true",
        options: ["true", "false"],
        dataType: "bool",
        dataTypeOptions: ["bool"],
        method: "clf/reg",
        subCondition: {
          param: "loss_func",
          value: [
            "BCEWithLogitsLossFlat",
            "BCELossFlat",
            "MSELossFlat",
            "L1LossFlat",
          ],
          isMatched: true,
        },
        checked: false,
        disabled: false,
        valueArr: ["true"],
      },
      lr: {
        inputType: "numb",
        min: 0,
        max: 1,
        dataType: "float",
        dataTypeOptions: ["float"],
        method: "clf/reg",
        checked: false,
        disabled: false,
        valueArr: [0.001],
      },
      train_bn: {
        inputType: "option",
        value: "true",
        options: ["true", "false"],
        dataType: "bool",
        dataTypeOptions: ["bool"],
        method: "clf/reg",
        checked: false,
        disabled: false,
        valueArr: ["true"],
      },
      moms: {
        inputType: "numb",
        value: "",
        valueArr: [0.95, 0.35, 0.95],
        min: 0,
        max: 1,
        dataType: "float",
        dataTypeOptions: ["float"],
        method: "clf/reg",
        subDomainCondition: {
          action: "count",
          value: 3,
          text: "3 parameter values ​​are required.",
          isMatched: true,
        },
        subText: "The order of the values ​​may affect the results.",
        checked: false,
        disabled: false,
      },
      use_bn: {
        inputType: "option",
        value: "true",
        options: ["true", "false"],
        dataType: "bool",
        dataTypeOptions: ["bool"],
        method: "clf/reg",
        checked: false,
        disabled: false,
        valueArr: ["true"],
      },
      bn_final: {
        inputType: "option",
        value: "false",
        options: ["false", "true"],
        dataType: "bool",
        dataTypeOptions: ["bool"],
        method: "clf/reg",
        checked: false,
        disabled: false,
        valueArr: ["false"],
      },
      bn_cont: {
        inputType: "option",
        value: "true",
        options: ["true", "false"],
        dataType: "bool",
        dataTypeOptions: ["bool"],
        method: "clf/reg",
        checked: false,
        disabled: false,
        valueArr: ["true"],
      },
      act_cls: {
        inputType: "option",
        value: "ReLU",
        options: [
          "ReLU",
          "RReLU",
          "Hardtanh",
          "ReLU6",
          "SiLU",
          "Mish",
          "Hardswish",
          "CELU",
          "GELU",
          "Hardshrink",
          "LeakyReLU",
          "LogSigmoid",
          "Softplus",
          "Softshrink",
          "MultiheadAttention",
          "PReLU",
          "Tanhshrink",
          "Softmin",
          "Softmax",
          "Softmax2d",
          "LogSoftmax",
          "Sigmoid",
          "Hardsigmoid",
          "Tanh",
          "ELU",
          "SELU",
          "GLU",
          "exact",
        ],
        dataType: "str",
        dataTypeOptions: ["str"],
        method: "clf/reg",
        checked: false,
        disabled: false,
        valueArr: ["ReLU"],
      },
      epochs: {
        inputType: "numb",
        min: 1,
        dataType: "int",
        dataTypeOptions: ["int"],
        method: "clf/reg",
        checked: false,
        disabled: false,
        valueArr: [50],
      },
      y_block: {
        inputType: "option",
        value: "category",
        options: ["category", "regression", "multicategory"],
        dataType: "str",
        dataTypeOptions: ["str"],
        method: "clf/reg",
        checked: false,
        disabled: false,
        valueArr: ["category"],
      },
    },
  },
  xgboost: {
    label: "XGBoost",
    method: "clf/reg",
    parameter: {
      booster: {
        inputType: "option",
        value: "gbtree",
        options: ["gbtree", "gblinear"],
        dataType: "str",
        dataTypeOptions: ["str"],
        method: "clf/reg",
        checked: false,
        disabled: false,
        valueArr: ["gbtree"],
      },
      colsample_bylevel: {
        inputType: "numb",
        min: 0,
        max: 1,
        dataType: "float",
        dataTypeOptions: ["float"],
        method: "clf/reg",
        checked: false,
        disabled: false,
        valueArr: [1],
      },
      max_depth: {
        inputType: "numb",
        min: 0,
        dataType: "int",
        dataTypeOptions: ["int"],
        method: "clf/reg",
        checked: false,
        disabled: false,
        valueArr: [6],
      },
      gamma: {
        inputType: "numb",
        min: 0,
        dataType: "float",
        dataTypeOptions: ["float"],
        method: "clf/reg",
        checked: false,
        disabled: false,
        valueArr: [0],
      },
      learning_rate: {
        inputType: "numb",
        min: 0.1,
        max: 1,
        dataType: "float",
        dataTypeOptions: ["float"],
        method: "clf/reg",
        checked: false,
        disabled: false,
        valueArr: [0.1],
      },
      max_delta_step: {
        inputType: "numb",
        min: 0,
        dataType: "int",
        dataTypeOptions: ["int"],
        method: "clf/reg",
        checked: false,
        disabled: false,
        valueArr: [0],
      },
      min_child_weight: {
        inputType: "numb",
        min: 0,
        dataType: "float",
        dataTypeOptions: ["float"],
        method: "clf/reg",
        checked: false,
        disabled: false,
        valueArr: [1],
      },
      n_estimators: {
        inputType: "numb",
        min: 0,
        dataType: "int",
        dataTypeOptions: ["int"],
        method: "clf/reg",
        checked: false,
        disabled: false,
        valueArr: [100],
      },
      random_state: {
        inputType: "numb",
        min: 0,
        dataType: "int",
        dataTypeOptions: ["int"],
        method: "clf/reg",
        checked: false,
        disabled: false,
        valueArr: [2],
      },
      objective: {
        inputType: "option",
        value: {
          clf: "binary:logistic",
          reg: "reg:squarederror",
        },
        options: {
          clf: ["binary:logistic", "multi:softmax", "multi:softprob"],
          reg: ["reg:squarederror", "reg:linear"],
        },
        dataType: "str",
        dataTypeOptions: ["str"],
        method: "clf/reg",
        checked: false,
        disabled: false,
        valueArr: {
          clf: ["binary:logistic"],
          reg: ["reg:squarederror"],
        },
      },
      subsample: {
        inputType: "numb",
        min: 0,
        max: 1,
        dataType: "float",
        dataTypeOptions: ["float"],
        method: "clf/reg",
        checked: false,
        disabled: false,
        valueArr: [1],
      },
      sampling_method: {
        inputType: "option",
        value: "uniform",
        options: ["uniform", "gradient_based"],
        dataType: "str",
        dataTypeOptions: ["str"],
        method: "clf/reg",
        subCondition: {
          param: "tree_method",
          value: ["gpu_hist"],
          isMatched: true,
        },
        checked: false,
        disabled: false,
        valueArr: ["uniform"],
      },
      max_leaves: {
        inputType: "numb",
        min: 0,
        dataType: "int",
        dataTypeOptions: ["int"],
        method: "clf/reg",
        subCondition: {
          param: "tree_method",
          value: ["exact"],
          isMatched: false,
        },
        checked: false,
        disabled: false,
        valueArr: [0],
      },
      max_bin: {
        inputType: "numb",
        min: 0,
        dataType: "int",
        dataTypeOptions: ["int"],
        method: "clf/reg",
        subCondition: {
          param: "tree_method",
          value: ["hist", "approx", "gpu_hist"],
          isMatched: true,
        },
        checked: false,
        disabled: false,
        valueArr: [256],
      },
      colsample_bytree: {
        inputType: "numb",
        min: 0,
        max: 1,
        dataType: "float",
        dataTypeOptions: ["float"],
        method: "clf/reg",
        checked: false,
        disabled: false,
        valueArr: [1],
      },
      colsample_bynode: {
        inputType: "numb",
        min: 0,
        max: 1,
        dataType: "float",
        dataTypeOptions: ["float"],
        method: "clf/reg",
        checked: false,
        disabled: false,
        valueArr: [1],
      },
      reg_lambda: {
        inputType: "numb",
        min: 0,
        dataType: "float",
        dataTypeOptions: ["float"],
        method: "clf/reg",
        defaultValCondition: {
          param: "booster",
          value: {
            gbtree: 0,
            another: 1,
          },
        },
        checked: false,
        disabled: false,
        valueArr: [1],
      },
      reg_alpha: {
        inputType: "numb",
        min: 0,
        dataType: "float",
        dataTypeOptions: ["float"],
        method: "clf/reg",
        checked: false,
        disabled: false,
        valueArr: [0],
      },
      scale_pos_weight: {
        inputType: "numb",
        min: 0,
        dataType: "float",
        dataTypeOptions: ["float"],
        method: "clf/reg",
        checked: false,
        disabled: false,
        valueArr: [1],
      },
      eval_metric: {
        inputType: "option",
        value: "rmse",
        options: [
          "rmse",
          "mae",
          "logloss",
          "error",
          "merror",
          "mlogloss",
          "auc",
          "map",
        ],
        dataType: "str",
        dataTypeOptions: ["str"],
        method: "clf/reg",
        checked: false,
        disabled: false,
        valueArr: ["rmse"],
      },
      feature_selector: {
        inputType: "option",
        value: "cyclic",
        options: ["cyclic", "shuffle", "random", "greedy", "thrifty"],
        dataType: "str",
        dataTypeOptions: ["str"],
        method: "clf/reg",
        subCondition: {
          param: "booster",
          value: ["gblinear"],
          isMatched: true,
        },
        checked: false,
        disabled: false,
        valueArr: ["cyclic"],
      },
      tree_method: {
        inputType: "option",
        value: "auto",
        options: ["auto", "exact", "approx", "hist", "gpu_hist"],
        dataType: "str",
        dataTypeOptions: ["str"],
        method: "clf/reg",
        checked: false,
        disabled: false,
        valueArr: ["auto"],
      },
      refresh_leaf: {
        inputType: "option",
        value: "true",
        options: ["true", "false"],
        dataType: "bool",
        dataTypeOptions: ["bool"],
        method: "clf/reg",
        checked: false,
        disabled: false,
        valueArr: ["true"],
      },
      process_type: {
        inputType: "option",
        value: "default",
        options: ["default", "update"],
        dataType: "str",
        dataTypeOptions: ["str"],
        method: "clf/reg",
        checked: false,
        disabled: false,
        valueArr: ["default"],
      },
      grow_policy: {
        inputType: "option",
        value: "depthwise",
        options: ["depthwise", "lossguide"],
        dataType: "str",
        dataTypeOptions: ["str"],
        method: "clf/reg",
        subCondition: {
          param: "tree_method",
          value: ["hist", "approx", "gpu_hist"],
          isMatched: true,
        },
        checked: false,
        disabled: false,
        valueArr: ["depthwise"],
      },
      single_precision_histogram: {
        inputType: "option",
        value: "true",
        options: ["true", "false"],
        dataType: "bool",
        dataTypeOptions: ["bool"],
        method: "clf/reg",
        subCondition: {
          param: "tree_method",
          value: ["hist", "approx", "gpu_hist"],
          isMatched: true,
        },
        checked: false,
        disabled: false,
        valueArr: ["true"],
      },
      top_k: {
        inputType: "numb",
        min: 0,
        dataType: "int",
        dataTypeOptions: ["int"],
        method: "clf/reg",
        subCondition: {
          param: "feature_selector",
          value: ["greedy", "thrifty"],
          isMatched: true,
        },
        checked: false,
        disabled: false,
        valueArr: [0],
      },
    },
  },
  random_forest: {
    label: "RandomForest",
    method: "clf/reg",
    parameter: {
      n_estimators: {
        inputType: "numb",
        min: 0,
        dataType: "int",
        dataTypeOptions: ["int"],
        method: "clf/reg",
        checked: false,
        disabled: false,
        valueArr: [100],
      },
      criterion: {
        inputType: "option",
        value: {
          clf: "gini",
          reg: "mse",
        },
        options: {
          clf: ["gini", "entropy"],
          reg: ["mse", "mae"],
        },
        dataType: "str",
        dataTypeOptions: ["str"],
        method: "clf/reg",
        checked: false,
        disabled: false,
        valueArr: {
          clf: ["gini"],
          reg: ["mse"],
        },
      },
      max_depth: {
        inputType: "numb",
        value: "None",
        min: 0,
        dataType: "int",
        dataTypeOptions: ["int", "None"],
        method: "clf/reg",
        subValue: "None",
        checked: false,
        disabled: false,
      },
      min_samples_split: {
        inputType: "numb",
        min: 0,
        dataType: "float",
        dataTypeOptions: ["float"],
        method: "clf/reg",
        checked: false,
        disabled: false,
        valueArr: [2],
      },
      min_samples_leaf: {
        inputType: "numb",
        min: 0,
        dataType: "float",
        dataTypeOptions: ["float"],
        method: "clf/reg",
        checked: false,
        disabled: false,
        valueArr: [1],
      },
      min_weight_fraction_leaf: {
        inputType: "numb",
        min: 0,
        dataType: "float",
        dataTypeOptions: ["float"],
        method: "clf/reg",
        checked: false,
        disabled: false,
        valueArr: [0],
      },
      max_features: {
        inputType: "option",
        value: "auto",
        options: ["auto", "sqrt", "log2"],
        dataType: "str",
        dataTypeOptions: ["str"],
        method: "clf/reg",
        checked: false,
        disabled: false,
        valueArr: ["auto"],
      },
      max_leaf_nodes: {
        inputType: "numb",
        value: "None",
        min: 0,
        dataType: "int",
        dataTypeOptions: ["int", "None"],
        method: "clf/reg",
        subValue: "None",
        checked: false,
        disabled: false,
      },
      min_impurity_decrease: {
        inputType: "numb",
        min: 0,
        dataType: "float",
        dataTypeOptions: ["float"],
        method: "clf/reg",
        checked: false,
        disabled: false,
        valueArr: [0],
      },
      bootstrap: {
        inputType: "option",
        value: "true",
        options: ["true", "false"],
        dataType: "bool",
        dataTypeOptions: ["bool"],
        method: "clf/reg",
        checked: false,
        disabled: false,
        valueArr: ["true"],
      },
      oob_score: {
        inputType: "option",
        value: "false",
        options: ["false", "true"],
        dataType: "bool",
        dataTypeOptions: ["bool"],
        method: "clf/reg",
        checked: false,
        disabled: false,
        valueArr: ["false"],
      },
      n_jobs: {
        inputType: "numb",
        value: "None",
        min: 0,
        dataType: "int",
        dataTypeOptions: ["int", "None"],
        method: "clf/reg",
        subValue: "None",
        checked: false,
        disabled: false,
      },
      random_state: {
        inputType: "numb",
        value: "None",
        min: 0,
        dataType: "int",
        dataTypeOptions: ["int", "None"],
        method: "clf/reg",
        subValue: "None",
        checked: false,
        disabled: false,
      },
      verbose: {
        inputType: "numb",
        min: 0,
        dataType: "int",
        dataTypeOptions: ["int"],
        method: "clf/reg",
        checked: false,
        disabled: false,
        valueArr: [0],
      },
      warm_start: {
        inputType: "option",
        value: "false",
        options: ["false", "true"],
        dataType: "bool",
        dataTypeOptions: ["bool"],
        method: "clf/reg",
        checked: false,
        disabled: false,
        valueArr: ["false"],
      },
      class_weight: {
        inputType: "option",
        value: "None",
        options: ["balanced", "balanced_subsample"],
        dataType: "str",
        dataTypeOptions: ["str", "None"],
        method: "clf",
        subValue: "None",
        checked: false,
        disabled: false,
      },
      ccp_alpha: {
        inputType: "numb",
        min: 0,
        dataType: "float",
        dataTypeOptions: ["float"],
        method: "clf/reg",
        checked: false,
        disabled: false,
        valueArr: [0],
      },
      max_samples: {
        inputType: "numb",
        value: "None",
        min: 0,
        dataType: "float",
        dataTypeOptions: ["float", "None"],
        method: "clf/reg",
        subValue: "None",
        checked: false,
        disabled: false,
      },
    },
  },
  gaussian_nb: {
    label: "GaussianNB",
    method: "clf",
    parameter: {
      priors: {
        inputType: "numb",
        value: "None",
        min: 0,
        dataType: "float",
        dataTypeOptions: ["float", "None"],
        method: "clf",
        subValue: "None",
        subDomainCondition: {
          action: "sum",
          value: "1",
          text: 'Except for "None", the sum of the values ​​must be 1.',
          isMatched: true,
        },
        checked: false,
        disabled: false,
      },
      var_smoothing: {
        inputType: "numb",
        min: 0,
        dataType: "float",
        dataTypeOptions: ["float"],
        method: "clf",
        checked: false,
        disabled: false,
        valueArr: [1e-9],
      },
    },
  },
  isolation_forest: {
    label: "IsolationForest",
    method: "clf",
    parameter: {
      n_estimators: {
        inputType: "numb",
        min: 0,
        dataType: "int",
        dataTypeOptions: ["int"],
        method: "clf",
        checked: false,
        disabled: false,
        valueArr: [100],
      },
      max_samples: {
        inputType: "numb",
        value: "auto",
        min: 0,
        dataType: "float",
        dataTypeOptions: ["float", "str"],
        method: "clf",
        subValue: "auto",
        checked: false,
        disabled: false,
      },
      contamination: {
        inputType: "numb",
        value: "auto",
        min: 0,
        max: 0.5,
        dataType: "float",
        dataTypeOptions: ["float", "str"],
        method: "clf",
        subValue: "auto",
        checked: false,
        disabled: false,
      },
      max_features: {
        inputType: "numb",
        min: 0,
        dataType: "float",
        dataTypeOptions: ["float"],
        method: "clf",
        checked: false,
        disabled: false,
        valueArr: [1],
      },
      bootstrap: {
        inputType: "option",
        value: "false",
        options: ["false", "true"],
        dataType: "bool",
        dataTypeOptions: ["bool"],
        method: "clf",
        checked: false,
        disabled: false,
        valueArr: ["false"],
      },
      n_jobs: {
        inputType: "numb",
        value: "None",
        min: -1,
        dataType: "int",
        dataTypeOptions: ["int", "None"],
        method: "clf",
        subValue: "None",
        checked: false,
        disabled: false,
      },
      random_state: {
        inputType: "numb",
        value: "None",
        min: 0,
        dataType: "int",
        dataTypeOptions: ["int", "None"],
        method: "clf",
        subValue: "None",
        checked: false,
        disabled: false,
      },
      verbose: {
        inputType: "numb",
        min: 0,
        dataType: "int",
        dataTypeOptions: ["int"],
        method: "clf",
        checked: false,
        disabled: false,
        valueArr: [0],
      },
      warm_start: {
        inputType: "option",
        value: "false",
        options: ["false", "true"],
        dataType: "bool",
        dataTypeOptions: ["bool"],
        method: "clf",
        checked: false,
        disabled: false,
        valueArr: ["false"],
      },
    },
  },
  gradient_boosting: {
    label: "GradientBoosting",
    method: "clf/reg",
    parameter: {
      loss: {
        inputType: "option",
        value: {
          clf: "deviance",
          reg: "ls",
        },
        options: {
          clf: ["deviance", "exponential"],
          reg: ["ls", "lad", "huber", "quantile"],
        },
        dataType: "str",
        dataTypeOptions: ["str"],
        method: "clf/reg",
        checked: false,
        disabled: false,
        valueArr: {
          clf: ["deviance"],
          reg: ["ls"],
        },
      },
      learning_rate: {
        inputType: "numb",
        min: 0.1,
        max: 1,
        dataType: "float",
        dataTypeOptions: ["float"],
        method: "clf/reg",
        checked: false,
        disabled: false,
        valueArr: [0.1],
      },
      n_estimators: {
        inputType: "numb",
        min: 0,
        dataType: "float",
        dataTypeOptions: ["float"],
        method: "clf/reg",
        checked: false,
        disabled: false,
        valueArr: [100],
      },
      subsample: {
        inputType: "numb",
        min: 0,
        dataType: "float",
        dataTypeOptions: ["float"],
        method: "clf/reg",
        checked: false,
        disabled: false,
        valueArr: [1],
      },
      criterion: {
        inputType: "option",
        value: {
          clf: "friedman_mse",
          reg: "friedman_mse",
        },
        options: {
          clf: ["friedman_mse", "squared_error", "rmse", "mae"],
          reg: ["friedman_mse", "rmse", "mae"],
        },
        dataType: "str",
        dataTypeOptions: ["str"],
        method: "clf/reg",
        checked: false,
        disabled: false,
        valueArr: {
          clf: ["friedman_mse"],
          reg: ["friedman_mse"],
        },
      },
      min_samples_split: {
        inputType: "numb",
        min: 0,
        dataType: "float",
        dataTypeOptions: ["float"],
        method: "clf/reg",
        checked: false,
        disabled: false,
        valueArr: [2],
      },
      min_samples_leaf: {
        inputType: "numb",
        min: 0,
        dataType: "float",
        dataTypeOptions: ["float"],
        method: "clf/reg",
        checked: false,
        disabled: false,
        valueArr: [1],
      },
      min_weight_fraction_leaf: {
        inputType: "numb",
        min: 0,
        dataType: "float",
        dataTypeOptions: ["float"],
        method: "clf/reg",
        checked: false,
        disabled: false,
        valueArr: [0],
      },
      max_depth: {
        inputType: "numb",
        min: 0,
        dataType: "int",
        dataTypeOptions: ["int"],
        method: "clf/reg",
        checked: false,
        disabled: false,
        valueArr: [3],
      },
      min_impurity_decrease: {
        inputType: "numb",
        min: 0,
        dataType: "float",
        dataTypeOptions: ["float"],
        method: "clf/reg",
        checked: false,
        disabled: false,
        valueArr: [0],
      },
      min_impurity_split: {
        inputType: "numb",
        value: "None",
        min: 0,
        dataType: "float",
        dataTypeOptions: ["float", "None"],
        method: "clf/reg",
        subValue: "None",
        checked: false,
        disabled: false,
      },
      random_state: {
        inputType: "numb",
        value: "None",
        min: 0,
        dataType: "int",
        dataTypeOptions: ["int", "None"],
        method: "clf/reg",
        subValue: "None",
        checked: false,
        disabled: false,
      },
      max_features: {
        inputType: "option",
        value: "None",
        options: ["auto", "sqrt", "log2"],
        dataType: "str",
        dataTypeOptions: ["str", "None"],
        method: "clf/reg",
        subValue: "None",
        checked: false,
        disabled: false,
      },
      alpha: {
        inputType: "numb",
        min: 0,
        dataType: "float",
        dataTypeOptions: ["float"],
        method: "clf/reg",
        checked: false,
        disabled: false,
        valueArr: [0.9],
      },
      verbose: {
        inputType: "numb",
        min: 0,
        dataType: "int",
        dataTypeOptions: ["int"],
        method: "clf/reg",
        checked: false,
        disabled: false,
        valueArr: [0],
      },
      max_leaf_nodes: {
        inputType: "numb",
        value: "None",
        min: 0,
        dataType: "int",
        dataTypeOptions: ["int", "None"],
        method: "clf/reg",
        subValue: "None",
        checked: false,
        disabled: false,
      },
      warm_start: {
        inputType: "option",
        value: "false",
        options: ["false", "true"],
        dataType: "bool",
        dataTypeOptions: ["bool"],
        method: "clf/reg",
        checked: false,
        disabled: false,
        valueArr: ["false"],
      },
      validation_fraction: {
        inputType: "numb",
        min: 0,
        max: 1,
        dataType: "float",
        dataTypeOptions: ["float"],
        method: "clf/reg",
        checked: false,
        disabled: false,
        valueArr: [0.1],
      },
      n_iter_no_change: {
        inputType: "numb",
        value: "None",
        min: 0,
        dataType: "int",
        dataTypeOptions: ["int", "None"],
        method: "clf/reg",
        subValue: "None",
        checked: false,
        disabled: false,
      },
      tol: {
        inputType: "numb",
        min: 0,
        dataType: "float",
        dataTypeOptions: ["float"],
        method: "clf/reg",
        checked: false,
        disabled: false,
        valueArr: [0.0001],
      },
      ccp_alpha: {
        inputType: "numb",
        min: 0,
        dataType: "float",
        dataTypeOptions: ["float"],
        method: "clf/reg",
        checked: false,
        disabled: false,
        valueArr: [0],
      },
    },
  },
  sgd: {
    label: "SGD",
    method: "clf/reg",
    parameter: {
      loss: {
        inputType: "option",
        value: {
          clf: "hinge",
          reg: "squared_loss",
        },
        options: {
          clf: [
            "hinge",
            "log",
            "modified_huber",
            "squared_hinge",
            "perceptron",
          ],
          reg: [
            "squared_loss",
            "huber",
            "epsilon_insensitive",
            "squared_epsilon_insensitive",
          ],
        },
        dataType: "str",
        dataTypeOptions: ["str"],
        method: "clf/reg",
        checked: false,
        disabled: false,
        valueArr: {
          clf: ["hinge"],
          reg: ["squared_loss"],
        },
      },
      penalty: {
        inputType: "option",
        value: "l2",
        options: ["l2", "l1", "elasticnet"],
        dataType: "str",
        dataTypeOptions: ["str"],
        method: "clf/reg",
        checked: false,
        disabled: false,
        valueArr: ["l2"],
      },
      alpha: {
        inputType: "numb",
        min: 0,
        dataType: "float",
        dataTypeOptions: ["float"],
        method: "clf/reg",
        checked: false,
        disabled: false,
        valueArr: [0.0001],
      },
      l1_ratio: {
        inputType: "numb",
        min: 0,
        max: 1,
        dataType: "float",
        dataTypeOptions: ["float"],
        method: "clf/reg",
        checked: false,
        disabled: false,
        valueArr: [0.15],
      },
      fit_intercept: {
        inputType: "option",
        value: "true",
        options: ["true", "false"],
        dataType: "bool",
        dataTypeOptions: ["bool"],
        method: "clf/reg",
        checked: false,
        disabled: false,
        valueArr: ["true"],
      },
      max_iter: {
        inputType: "numb",
        min: 0,
        dataType: "int",
        dataTypeOptions: ["int"],
        method: "clf/reg",
        checked: false,
        disabled: false,
        valueArr: [1000],
      },
      tol: {
        inputType: "numb",
        min: 0,
        dataType: "float",
        dataTypeOptions: ["float"],
        method: "clf/reg",
        checked: false,
        disabled: false,
        valueArr: [0.001],
      },
      shuffle: {
        inputType: "option",
        value: "true",
        options: ["true", "false"],
        dataType: "bool",
        dataTypeOptions: ["bool"],
        method: "clf/reg",
        checked: false,
        disabled: false,
        valueArr: ["true"],
      },
      verbose: {
        inputType: "numb",
        min: 0,
        dataType: "int",
        dataTypeOptions: ["int"],
        method: "clf/reg",
        checked: false,
        disabled: false,
        valueArr: [0],
      },
      epsilon: {
        inputType: "numb",
        min: 0,
        dataType: "float",
        dataTypeOptions: ["float"],
        method: "clf/reg",
        checked: false,
        disabled: false,
        valueArr: [0.1],
      },
      n_jobs: {
        inputType: "numb",
        value: "None",
        min: -1,
        dataType: "int",
        dataTypeOptions: ["int", "None"],
        method: "clf",
        subValue: "None",
        checked: false,
        disabled: false,
      },
      random_state: {
        inputType: "numb",
        value: "None",
        min: 0,
        dataType: "int",
        dataTypeOptions: ["int", "None"],
        method: "clf/rseg",
        subValue: "None",
        checked: false,
        disabled: false,
      },
      learning_rate: {
        inputType: "option",
        value: {
          clf: "optimal",
          reg: "invscaling",
        },
        options: {
          clf: ["optimal", "invscaling", "constant", "adaptive"],
          reg: ["invscaling", "optimal", "constant", "adaptive"],
        },
        dataType: "str",
        dataTypeOptions: ["str"],
        method: "clf/reg",
        checked: false,
        disabled: false,
        valueArr: {
          clf: ["optimal"],
          reg: ["invscaling"],
        },
      },
      eta0: {
        inputType: "numb",
        min: 0,
        dataType: "float",
        dataTypeOptions: ["float"],
        method: "clf/reg",
        checked: false,
        disabled: false,
        valueArr: {
          clf: [0],
          reg: [0.01],
        },
      },
      power_t: {
        inputType: "numb",
        min: 0,
        dataType: "float",
        dataTypeOptions: ["float"],
        method: "clf/reg",
        checked: false,
        disabled: false,
        valueArr: [0.5],
      },
      early_stopping: {
        inputType: "option",
        value: "false",
        options: ["false", "true"],
        dataType: "bool",
        dataTypeOptions: ["bool"],
        method: "clf/reg",
        checked: false,
        disabled: false,
        valueArr: ["false"],
      },
      validation_fraction: {
        inputType: "numb",
        min: 0,
        dataType: "float",
        dataTypeOptions: ["float"],
        method: "clf/reg",
        checked: false,
        disabled: false,
        valueArr: [0.1],
      },
      n_iter_no_change: {
        inputType: "numb",
        min: 0,
        dataType: "int",
        dataTypeOptions: ["int"],
        method: "clf/reg",
        checked: false,
        disabled: false,
        valueArr: [5],
      },
      warm_start: {
        inputType: "option",
        value: "false",
        options: ["false", "true"],
        dataType: "bool",
        dataTypeOptions: ["bool"],
        method: "clf/reg",
        checked: false,
        disabled: false,
        valueArr: ["false"],
      },
      average: {
        inputType: "option",
        value: "false",
        options: ["false", "true"],
        dataType: "bool",
        dataTypeOptions: ["bool"],
        method: "clf/reg",
        checked: false,
        disabled: false,
        valueArr: ["false"],
      },
    },
  },
};
